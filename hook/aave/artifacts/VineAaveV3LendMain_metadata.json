{
	"compiler": {
		"version": "0.8.28+commit.7893614a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_govern",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_manager",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "name_",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol_",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "allowance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "ERC20InsufficientAllowance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "ERC20InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "approver",
						"type": "address"
					}
				],
				"name": "ERC20InvalidApprover",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC20InvalidReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "ERC20InvalidSender",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "ERC20InvalidSpender",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "CrossUSDC",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "L2Supply",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_usdcAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_ausdcAmount",
						"type": "uint256"
					}
				],
				"name": "L2withdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ReceiveMessage",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "oldFee",
						"type": "uint16"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "newFee",
						"type": "uint16"
					}
				],
				"name": "UpdateFee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "_bufferTime",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "_endTime",
						"type": "uint64"
					}
				],
				"name": "UpdateTime",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "UserDeposite",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "UserWithdraw",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "destinationDomain",
						"type": "uint32"
					},
					{
						"internalType": "uint64",
						"name": "inputBlock",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "usdc",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "crossUSDC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "amount",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "usdc",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "l2Pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "deposite",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "depositeTotalAmount",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "finallyAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "finallyState",
				"outputs": [
					{
						"internalType": "bytes1",
						"name": "",
						"type": "bytes1"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserSupply",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "supplyTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "pledgeAmount",
								"type": "uint64"
							}
						],
						"internalType": "struct IVineStruct.UserSupplyInfo",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "govern",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "id",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "l2Pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "usdc",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "inL2Supply",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "l2Pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "ausdc",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "ausdcAmount",
						"type": "uint256"
					}
				],
				"name": "inL2Withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "destinationDomain",
								"type": "uint32"
							},
							{
								"internalType": "uint64",
								"name": "inputBlock",
								"type": "uint64"
							},
							{
								"internalType": "address",
								"name": "l2Pool",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "ausdc",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "usdc",
								"type": "address"
							}
						],
						"internalType": "struct IVineStruct.L2WithdrawAndCrossUSDCParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "l2WithdrawAndCrossUSDC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lockState",
				"outputs": [
					{
						"internalType": "bytes1",
						"name": "",
						"type": "bytes1"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "message",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "attestation",
								"type": "bytes"
							},
							{
								"internalType": "address",
								"name": "usdc",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "l2Pool",
								"type": "address"
							}
						],
						"internalType": "struct IVineStruct.ReceiveUSDCAndL2SupplyParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "receiveUSDCAndL2Supply",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes1",
						"name": "state",
						"type": "bytes1"
					}
				],
				"name": "setLock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "_referralCode",
						"type": "uint16"
					}
				],
				"name": "setReferralCode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newManager",
						"type": "address"
					}
				],
				"name": "transferManager",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "usdc",
						"type": "address"
					}
				],
				"name": "updateFinallyAmount",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "usdc",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "usdc",
						"type": "address"
					}
				],
				"name": "withdrawFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "usdc",
						"type": "address"
					}
				],
				"name": "withdrawProtocolFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"ERC20InsufficientAllowance(address,uint256,uint256)": [
					{
						"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
						"params": {
							"allowance": "Amount of tokens a `spender` is allowed to operate with.",
							"needed": "Minimum amount required to perform a transfer.",
							"spender": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ERC20InsufficientBalance(address,uint256,uint256)": [
					{
						"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
						"params": {
							"balance": "Current balance for the interacting account.",
							"needed": "Minimum amount required to perform a transfer.",
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC20InvalidApprover(address)": [
					{
						"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
						"params": {
							"approver": "Address initiating an approval operation."
						}
					}
				],
				"ERC20InvalidReceiver(address)": [
					{
						"details": "Indicates a failure with the token `receiver`. Used in transfers.",
						"params": {
							"receiver": "Address to which tokens are being transferred."
						}
					}
				],
				"ERC20InvalidSender(address)": [
					{
						"details": "Indicates a failure with the token `sender`. Used in transfers.",
						"params": {
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC20InvalidSpender(address)": [
					{
						"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
						"params": {
							"spender": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC-20 token failed."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"HyperOmniLend/contracts/hook/aave/VineAaveV3LendMain.sol": "VineAaveV3LendMain"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/IERC1363.sol": {
			"keccak256": "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
				"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
			"license": "MIT",
			"urls": [
				"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
				"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC20.sol": {
			"keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
			"license": "MIT",
			"urls": [
				"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
				"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf",
			"license": "MIT",
			"urls": [
				"bzz-raw://fabe6bef5167ae741dd8c22d7f81d3f9120bd61b290762a2e8f176712567d329",
				"dweb:/ipfs/QmSnEitJ6xmf1SSAUeZozD7Gx7h8bNnX3a1ZBzqeivsvVg"
			]
		},
		"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a",
				"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"HyperOmniLend/contracts/core/ShareToken.sol": {
			"keccak256": "0x9f52449fb383bb611c09620e73533911733d3dcc0ba5a2c2ad6ba17fbd565bb0",
			"license": "GPL-3",
			"urls": [
				"bzz-raw://faff8ae97ffa5aa816db907321de052b9613ecf0fc3b83cdfe814148c9afb9f7",
				"dweb:/ipfs/Qmbv356tzekVTfEM42WPdPupuPrMHGYFdjKV1JZmwoj6Ps"
			]
		},
		"HyperOmniLend/contracts/helper/Context.sol": {
			"keccak256": "0x47f10494606b86ed149dcaad74cb401ad9311696f14689410c45c7330e3f34fb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8f393625f893d7c666e014fd8e9b8cf59f7fe21b030f80f571d892006cdd77e6",
				"dweb:/ipfs/QmQVtX3R1LqVz2KVyzsRmVM6Zgkf9acU4Cn2hhXxYYev9U"
			]
		},
		"HyperOmniLend/contracts/hook/aave/VineAaveV3LendMain.sol": {
			"keccak256": "0x11018d403c2a76035b09bf608836e685800df07e13f3dced97dfcbaed64ae034",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://d04d07c8f2c373786cbda91a62393a1554e2712f0eb157c136ab83eb69a1e065",
				"dweb:/ipfs/QmfHYDsao8GXUfX2gKXF2ZhyB2BP8rQtdqVSRDivfEEn2z"
			]
		},
		"HyperOmniLend/contracts/interfaces/ICrossCenter.sol": {
			"keccak256": "0x0d9b368a142294f8afce0e5e746de9acf2d9e8ee633e6f9b84f7bb513e7df905",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a84ccdcce51f6864c9aba81a5bf1bddc5e19575266476d788291bcaa164c5f18",
				"dweb:/ipfs/QmaeSLodx9gZiJD8sLkPjGZM8HJ5usfiTRs5cDiznoxYP6"
			]
		},
		"HyperOmniLend/contracts/interfaces/IERC20Errors.sol": {
			"keccak256": "0x44a20c8f55f317f1f72a8073b7aff8906a4fb67e0432e7c00f64caaf234de936",
			"license": "MIT",
			"urls": [
				"bzz-raw://f0dd61fbb79fd9593bcd53e7d100165fce97dacdc93cbe3bc42d8c1023f3c238",
				"dweb:/ipfs/QmWYeyMXK4rqGzKUMN5gBdXByFrrYMaY8azu45bmeddn4C"
			]
		},
		"HyperOmniLend/contracts/interfaces/ISharer.sol": {
			"keccak256": "0x9f3832f8446a551ffe4303852a06b2094241fa414868ebf5cdbf964d1c02536c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://51a1bc97f3fd96e01d7d9acde9362e8dd43ef9fe1600e37f3797b1c580d40187",
				"dweb:/ipfs/QmQ9co2KMBqyEjxjCaM5hcYRP2DCokx7CWeFRF7WLZVXUY"
			]
		},
		"HyperOmniLend/contracts/interfaces/IVineEvent.sol": {
			"keccak256": "0xf2a2d56454de3a10a332a5e55c021e5a572cc87c443be86e0189bbcd4b14fe5d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6c8af246eac223f9c145782b7e80de2e792cb38db575b63594992062d5f344fd",
				"dweb:/ipfs/QmZ6jkvSmttVzyxLsWLB1CTHxzfvBvVqBJTUW37yfCf4Ar"
			]
		},
		"HyperOmniLend/contracts/interfaces/IVineStruct.sol": {
			"keccak256": "0x9e06bae579a6de14f08183621c288982bdf0869dffa0b974d39af14215022435",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://9252b7378ae0c1c9717bb6cc099bb0878d1bda07e8a7814ae23bfc0fed60fb11",
				"dweb:/ipfs/QmUna74oo6VsiByV1NERuogUN6sn5BsrsofPpg8wZLnG64"
			]
		},
		"HyperOmniLend/contracts/interfaces/aaveV3/IL2Encode.sol": {
			"keccak256": "0x1b9e906ab564284b4cc9b4c1aa49096f91a51bf81f3268062ed5937f9c627c2a",
			"license": "MIT",
			"urls": [
				"bzz-raw://51cff32e598d7569c1c08b7b7f69ebfb8b315be8f5ba4adb70f4991726addd52",
				"dweb:/ipfs/Qmb2sdz1uCyQSom6CFKRr1JCzM7EAGBV9JGw7fiCkhheFL"
			]
		},
		"HyperOmniLend/contracts/interfaces/aaveV3/IL2Pool.sol": {
			"keccak256": "0xd1bdc9c5266f0c6e1950a5bff56a080c81d5797c8944ff0bbce3ad46ccc6f6b1",
			"license": "MIT",
			"urls": [
				"bzz-raw://94a1a7c23231e9326f3e2db1fc5fd8c09c73f8741ac7e0158b1e81a702af40a6",
				"dweb:/ipfs/QmRvfnzdhahsqW2J8wE1UEMsnvX7wM7pzgXHDdA5Yya6eH"
			]
		},
		"HyperOmniLend/contracts/interfaces/core/IGovernance.sol": {
			"keccak256": "0x92e1f153b003d20b02b635c04123fb164a2988c3d4f63217d53290f727893066",
			"license": "GPL-3",
			"urls": [
				"bzz-raw://4c5c62e3d4098d33177e505b00f924be0c139d350b8a7bdd36bd0c942aa72c98",
				"dweb:/ipfs/QmcKRx3Lrrv5rVdP4cQZe5DRhfBWYmsVxDWRyfTSKg1tGk"
			]
		},
		"HyperOmniLend/contracts/libraries/VineLib.sol": {
			"keccak256": "0x2f62ef7acf7335e715e690c3020df468040ee0c289da3b116df4a1240c440ff0",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a2e40de25c746bd9aa1e46dfeb9af0f253be7833d7009fb3cf0f8d2c152bedf3",
				"dweb:/ipfs/QmSVGkmV8U8BGT4uoY7pP9U7SFzsAndXcYpUF4mV4TciDg"
			]
		}
	},
	"version": 1
}